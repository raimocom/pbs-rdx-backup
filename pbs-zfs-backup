#!/bin/bash
set -o errtrace
#set -xv
trap 'echo ERROR: Fehler in Funktion "${FUNCNAME[0]}", Errorcode "$?" ; exit 1' ERR
retcode=NIL
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

echo "$0" - a PBS ZFS datastore to USB media sync tool

# load settings
. $SCRIPT_DIR/settings.sh


# ---------------------
# init log log
touch "$maillog_file"
echo "To: $maillog_to" >"$maillog_file"
echo "Subject: $maillog_subject" >>"$maillog_file"
echo -e "\n" >>"$maillog_file"

# change to script dir
cd "$(dirname "$0")" || exit 1
declare backup_targetZfs
declare -A snapshot_tracker
declare backup_media_name
declare -i lowest_snapshot_number

msg() { echo "$*" 1>&2; }

log () {
	timestamp=$(date +%Y-%m-%d_%H:%M:%S)
	echo "$timestamp" - "$*" | tee -a "$maillog_file" ;
}

cleanup_and_exit () {
	true;
}

read_snapshot_tracker_db () {
	unset lowest_snapshot_number
	[[ -f snapshot_tracker.db ]] || return 1
	while read -r drivename snapshot_number ; do
	snapshot_tracker[$drivename]=$snapshot_number
	if [[ -z $lowest_snapshot_number || $snapshot_number -lt $lowest_snapshot_number ]] ; then
	       lowest_snapshot_number=$snapshot_number
	fi
	done < snapshot_tracker.db
}

write_snapshot_tracker_db () {
	for key in "${!snapshot_tracker[@]}" ; do
		echo $key ${snapshot_tracker[$key]}
	done >snapshot_tracker.db
	#update snapshot_tracker array for removal of old snapshots
	read_snapshot_tracker_db
}

prepare_media () {
	wipefs -a /dev/disk/by-id/"$backup_media_name" &&\
	zpool create -o ashift=12 ${new_backup_media_basename} /dev/disk/by-id/"$backup_media_name" &&\
	zfs set canmount=noauto com.sun:auto-snapshot=false ${new_backup_media_basename}
	backup_targetZfs=${new_backup_media_basename}
}

list_snapshots () {
# IN : $1 -> ZFS file system
# OUT: list of snapshots, newest last
	zfs list -t snapshot -s creation -o name -H "$1" | awk  -F @ '{if($2 ~ /pbs-backupsnap_[0-9]+/){print $2}}'
}



resume_send () {
# IN: resume token
# OUT: none
	zfs send -t "$1" 2>/dev/null | zfs receive -sFv "$backup_targetZfs" 2>/dev/null
	retcode=$?
}

identify_backup_media () {
	#diff fixed_disks.list <(ls /dev/disk/by-id) | tail -n +2 | awk '{if ( $NF !~ /part[0-9]+$/ ) {print $NF} }'  <-- TOO DANGEROUS
	for media in $(awk '{print $1}' <snapshot_tracker.db) ; do
		if [[ -L /dev/disk/by-id/"$media" ]] ; then 
		       echo $media
		       break
		fi	       
	done

}

detect_backup_pool () {
# INPUT: none
# OUTPUT: ZFS poolname
	for hdd in $(awk '{print $1}' <backup_media.db) ; do
		for partition in /dev/disk/by-id/${hdd}-part* ; do
			zpool import -o name -d "$partition" 2>/dev/null | awk '{if($1 ~ /pool:/){print $2}}'
		done
	done
}

get_last_backup_snapshot_name () {
# IN : ZFS file system
# OUT: last backup snapshot name
	zfs list -o name -H -s creation -t snapshot "$1"  | tail -n 1 | awk -F @ '{print $2}'
}
get_last_backup_snapshot_number () {
# IN : ZFS file system
# OUT: last backup snapshot number
	zfs list -o name -H -s creation -t snapshot "$1"  | tail -n 1 | awk -F _ '{print $NF}' | grep -E '^[0-9]+$'
}

create_snapshot () {
# IN : ZFS file system
# OUT: none
	[[ -z $1 ]] && return 1
	zfs snapshot "$1"@"$backup_snapshot_basename"_$(($(get_last_backup_snapshot_number "$1")+1))
}


remove_old_snapshots () {
	[[ -z $1 ]] && return 1
	if [[ $1 == $backup_sourceZfs ]] ; then
		# read snapshot_tracker and remove all from backup_sourceZfs but oldest X existing on any backup media (set in settings.sh)
                for snap in $(list_snapshots "$1" | awk '{ match($0, /[0-9]+$/) ; print substr ($0,RSTART,RLENGTH) }') ; do
                        if [[ $(($snap+$keep_snaps_on_sourceZFS)) -lt $lowest_snapshot_number ]] ; then
				log "removing ${backup_sourceZfs}@${backup_snapshot_basename}_$snap . ."
				zfs destroy ${backup_sourceZfs}@${backup_snapshot_basename}_$snap
				log ". . done"
			fi
		done
	else
		# remove all but last 2 snapshot from backup media
		for snap in $(list_snapshots "$1" | head -n -3) ; do 
			log "removing ${backup_targetZfs}@$snap . ."
			zfs destroy ${backup_targetZfs}@$snap
			log ". . done"
		done

	fi
}


do_incremental_send () {
# INPUT: $1 ->  ZFS start snapshot ; $2 -> ZFS end snapshot
# OUTPUT: none (+ update snapshot_tracker)
	zfs send -V "$backup_sourceZfs"@"$2" -i @"$1" | zfs recv -sFv "$backup_targetZfs" && snapshot_tracker[$backup_media_name]=$(echo "$2" | awk -F _ '{print $NF}')
	if [[ $? -ne 0 ]] ; then
		log "Error at do_incremental_send(). Cleanup media and do full send"
		zpool export "$backup_targetZfs" && prepare_media && do_full_send $(get_last_backup_snapshot_name $backup_sourceZfs)
	fi
}

do_full_send () {
# INPUT: $1 ->  ZFS snapshot
# OUTPUT: none (+ update snapshot_tracker)
	zfs send -V "$backup_sourceZfs"@"$1" | zfs recv -sFv "$backup_targetZfs" && snapshot_tracker[$backup_media_name]=$(echo "$1" | awk -F _ '{print $NF}')
}

get_resume_token () {
# IN: ZFS file system
# OUT: ZFS receive_resume_token
	local token=$(zfs get receive_resume_token -o value -H "$1")
	if [[ $token != - ]]; then echo $token ; fi
}

detect_inserted_backuppool () {
# IN : none
# OUT: vars; backuppool backup_media_name
	for pool in $(zpool status | awk '{if($1 ~ /pool:/){print $2}}') ; do
		for poolstats in $(zpool status "$pool" | awk '{print $1}') ; do
			for drive in $(awk '{print $1}' <backup_media.db ) ; do
				if [[ $poolstats == $drive ]] ; then
				       backup_pool=$pool
				       backup_media_name=$drive
				fi
			done
		done
	done
}

check_snapshot () {
# IN : ZFS filesystem, ZFS snapshot
# OUT: ZFS snapshot (if found) or empty response
	zfs list -t snap "$1"@"$2" -H -o name 2>/dev/null
}



#-#-#-#-#-#-#-#-#-#-# MAIN #-#-#-#-#-#-#-#-#-#-#-#-#

read_snapshot_tracker_db

# identify backup media
log "Suche Backupmedium . . ."
backup_media_name=$(identify_backup_media)
if [[ -z $backup_media_name ]] ; then
	log "ERROR: Kein Backupmedium angeschlossen. Exit"
	exit 1
else
	log "Backupmedium $backup_media_name gefunden"
fi

# create first snapshot, if needed
if [[ -z $(list_snapshots $backup_sourceZfs 2>/dev/null) ]] ; then
	log "Backupsource $backup_sourceZfs noch ohne Snapshots. Erzeuge ersten Snapshot . ."
	zfs snapshot "$backup_sourceZfs"@"$backup_snapshot_basename"_0
	log ". . ok"
fi

# create new snapshot on source
log "Letzter Snapshot $backup_sourceZfs@$(get_last_backup_snapshot_name $backup_sourceZfs). Erzeuge neuen ZFS-Snapshot . ."
create_snapshot "$backup_sourceZfs"
log ". . ok (@$(get_last_backup_snapshot_name $backup_sourceZfs))"

# backup pool already imported?
log "Suche Backuppool . . ."
detect_inserted_backuppool
if [[ $backup_media_name && $backup_pool ]] ; then
	log ". . . bereits importiert ($backup_pool auf $backup_media_name)" 
	backup_targetZfs="$backup_pool"
else
	# identify backup pool on backup media
	backup_targetZfs=$(detect_backup_pool)
	if [[ -z $backup_targetZfs ]] ; then 
		log ". . . kein importierbarer Backup-Pool auf $backup_media_name gefunden. Erzeuge ZFS-Filesystem . ." 
		########## prepare new backup media with new zpool (zpool create)
		prepare_media
		log ". . ok. ($backup_targetZfs)"
	else
       		log Backup-Pool ist "$backup_targetZfs"
		log "Importiere $backup_targetZfs von /dev/disk/by-id/${backup_media_name}-part1 . ."
		zpool import ${backup_targetZfs} -d /dev/disk/by-id/${backup_media_name}-part1
		log '. . fertig'
	fi
fi

# resume send needed?
log "Resume Token auf $backup_targetZfs vorhanden? . ." 
resume_token=$(get_resume_token "$backup_targetZfs")
if [ -z "$resume_token" ]
then
	log ". . nein"
else
	log "$resume_token"
	log ". . ja. Setze Senden von $backup_sourceZfs zu $backup_targetZfs fort .. "
	set +E #trap off
	resume_send "$resume_token"
	set -E #trap on
	if [[ $retcode -ne 0 ]] ; then
		log "FEHLER: Resume fehlgeschlagen, lÃ¶sche Medium und erzeuge neues ZFS-Filesystem . . "
		zpool export "$backup_targetZfs"
		prepare_media
		log ". . ok. ($backup_targetZfs)"
	else     
		log ". . fertig."
	fi
fi

# read snapshot_tracker.db into associative array snapshot_tracker[]
read_snapshot_tracker_db

zfs_target_snap=$(get_last_backup_snapshot_name "$backup_sourceZfs")
zfs_incremental_snap=$(get_last_backup_snapshot_name "$backup_targetZfs")

# do ZFS send operation
if [[ $zfs_incremental_snap == $zfs_target_snap ]] ; then
	log "aktuellster Snapshot $zfs_target_snap auf Backupmedium vorhanden, nichts zu tun"
elif [[ -z $zfs_incremental_snap ]] ; then
	log "Kein Snapshot auf Backupmedium, sende komplettes Filesystem . ."
	zpool export "$backup_targetZfs"
	prepare_media
	do_full_send $zfs_target_snap
	log ". . ok"
# Source ZFS has last snapshot of target ZFS?	
elif [[ -z $(check_snapshot "$backup_sourceZfs" "$zfs_incremental_snap") ]] ; then
	log "letzter Snapshot auf Backupmedium fehlt in Quell-ZFS -> Full Send"
	log "exportiere Pool $backup_targetZfs . ."
	zpool export $backup_targetZfs
	log ". . ok"
	log "neues ZFS auf Backupmedium erzeugen . ."
	prepare_media
	log ". . ok ($backup_targetZfs)"
	log "Sende komplettes ZFS-Filesystem (${backup_sourceZfs}@${zfs_target_snap} -> $backup_targetZfs)"
	do_full_send "$zfs_target_snap"
	log ". . ok"
else
	log "Sende inkrementellen ZFS stream . . ($zfs_incremental_snap -> $zfs_target_snap)"
	snapshot_tracker[$backup_media_name]=$(echo "$zfs_incremental_snap" | awk -F _ '{print $NF}')
	do_incremental_send $zfs_incremental_snap $zfs_target_snap
	log ". . ok"
	remove_old_snapshots $backup_targetZfs
	remove_old_snapshots $backup_sourceZfs
fi


write_snapshot_tracker_db


log "Exportiere Pool . ."
zpool export "$backup_targetZfs"
log ". . fertig."

#send mail
msmtp --host=$smtp_host --port=$smtp_port --protocol=smtp --auth=$smtp_auth --from=$smtp_sent_from --user=$smtp_user --tls=$smtp_tls --passwordeval="echo $smtp_password"  -t < "$maillog_file"	

## read disk-id, vendor, serial, capacity from 

### check media condition 
# if (no ZFS on media){
# 	prepare empty media()
#	}
#  
#	

#### cleanup
# zfs destroy all but last snapshot on backup media
# zfs destroy all snapshots that are not the last snapshot on any of the backup media (snapshot_holds.db)

