#!/bin/bash

echo $0 - a PBS ZFS datastore to USB media sync tool

# default settings
backup_sourceZfs=PBS-WD-2TB-intern
backup_targetZfs=pbs-zfs-usb-backup

# ---------------------

# change to script dir
cd "$(dirname "$0")"

cleanup_and_exit () {
	umount $backup_target\
	;
}

prepare_empty_media () {
	wipefs -a $backupDrive &&\
	zpool create -m /$backup_targeZfs -o ashift=12 $backup_targetZfs $backupDrive &&\
	zfs set canmount=noauto com.sun:auto-snapshot $backup_targetZfs\
	;
}

list_backup_snapshots () {
	# input value: $1 -> ZFS file system
	zfs list -t snapshot -s creation -o name -H $1 | awk  -F @ '{if ( $2 ~ /pbs-backupsnap_[0-9]+/ ) {print $2} }'\
	;
}



resume_send () {
	zfs send -t $(zfs get -o value -H receive_resume_token $backup_targetZfs) | zfs receive -s $backup_targetZfs
}


#-#-# MAIN #-#-#


### check for available backup media
## WIP, defines $backupDrive
##  search for connected, available backup media (iterate over backup_media.db if any is present)
## read disk-id, vendor, serial, capacity from 

### check media condition 
# if (no ZFS on media){
# 	prepare empty media()
#	}
#  
#	

#### cleanup
# zfs destroy all but last snapshot on backup media
# zfs destroy all snapshots that are not the last snapshot on any of the backup media (snapshot_holds.db)
# zpool export $backup_targetZfs

# mount backup media
umount $backup_target
mkdir $backup_target
mount /dev/disk/by-label/$backup_fs_label $backup_target
mkdir $backup_target/$backup_pbs_datastore_folder

# check for backup media marker file
echo -n "Checking for marker file $backup_target/.pbs-usb-backup-media . . ."
if [ -f "${backup_target}/.pbs-usb-backup-media" ]
then
	echo " . . found"
	# rsync over datastore to usb backup media
	echo "rsync data from $backup_source to $backup_target/$backup_pbs_datastore_folder"
	rsync -a --stats --exclude='lost+found' --delete $backup_source $backup_target/$backup_pbs_datastore_folder
	if [ $? = 0 ]
	then
		echo "rsync ok"
	else
		echo "rsync reported ERRORS!"
	fi
else
	echo " . . not found. Exiting."
	cleanup_and_exit 
	exit 1
fi
cleanup_and_exit 
